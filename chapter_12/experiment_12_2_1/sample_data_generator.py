#!/usr/bin/env python3
"""
Generate sample genomic data for testing the sparse index pipeline.

This script creates realistic genomic variant data with the following format:
chr<N> <position> <genotype_count> [allele_frequency]

Example output:
chr1 1000 2 0.15
chr1 1500 1 0.05
chr2 2000 3 0.25
"""

import random
import argparse
from pathlib import Path

def generate_genomic_data(
    output_file: str,
    num_variants: int = 10000,
    num_chromosomes: int = 22,
    max_position: int = 1000000,
    include_freq: bool = True,
    seed: int = 42
):
    """Generate synthetic genomic data."""
    
    random.seed(seed)
    
    print(f"Generating {num_variants} variants across {num_chromosomes} chromosomes...")
    print(f"Position range: 1 to {max_position}")
    print(f"Output file: {output_file}")
    print(f"Include allele frequencies: {include_freq}")
    
    variants = []
    
    for _ in range(num_variants):
        # Random chromosome (1-22, X, Y, MT)
        if random.random() < 0.9:  # 90% autosomal chromosomes
            chromosome = f"chr{random.randint(1, num_chromosomes)}"
        elif random.random() < 0.5:
            chromosome = "chrX"
        elif random.random() < 0.8:
            chromosome = "chrY"
        else:
            chromosome = "chrMT"
        
        # Random position (clustered around certain regions to simulate real data)
        if random.random() < 0.3:  # 30% clustered variants
            cluster_center = random.randint(1, max_position)
            position = max(1, min(max_position, 
                cluster_center + random.randint(-1000, 1000)))
        else:
            position = random.randint(1, max_position)
        
        # Genotype count (0-3, representing diploid genotypes)
        # 0 = homozygous reference, 1 = heterozygous, 2 = homozygous alternate
        # 3 = rare case for complex variants
        genotype_count = random.choices([0, 1, 2, 3], weights=[40, 45, 12, 3])[0]
        
        # Allele frequency (if requested)
        if include_freq:
            if genotype_count == 0:
                allele_freq = random.uniform(0.01, 0.05)  # Rare variants
            elif genotype_count == 1:
                allele_freq = random.uniform(0.05, 0.3)   # Common variants
            elif genotype_count == 2:
                allele_freq = random.uniform(0.3, 0.8)    # Very common
            else:
                allele_freq = random.uniform(0.01, 0.1)   # Complex variants
        else:
            allele_freq = None
        
        variants.append({
            'chr': chromosome,
            'pos': position,
            'count': genotype_count,
            'freq': allele_freq
        })
    
    # Sort by chromosome and position for realistic data
    def chr_sort_key(variant):
        chr_name = variant['chr']
        if chr_name.startswith('chr'):
            chr_name = chr_name[3:]
        
        if chr_name.isdigit():
            return (0, int(chr_name), variant['pos'])
        elif chr_name == 'X':
            return (1, 0, variant['pos'])
        elif chr_name == 'Y':
            return (1, 1, variant['pos'])
        elif chr_name == 'MT':
            return (1, 2, variant['pos'])
        else:
            return (2, 0, variant['pos'])
    
    variants.sort(key=chr_sort_key)
    
    # Write to file
    with open(output_file, 'w') as f:
        # Write header
        f.write("# Synthetic genomic variant data\n")
        f.write("# Generated by generate_sample_data.py\n")
        f.write(f"# Total variants: {len(variants)}\n")
        f.write(f"# Chromosomes: {num_chromosomes}\n")
        f.write(f"# Max position: {max_position}\n")
        f.write("# Format: chromosome position genotype_count [allele_frequency]\n")
        f.write("#\n")
        
        # Write data
        for variant in variants:
            if include_freq and variant['freq'] is not None:
                f.write(f"{variant['chr']}\t{variant['pos']}\t{variant['count']}\t{variant['freq']:.4f}\n")
            else:
                f.write(f"{variant['chr']}\t{variant['pos']}\t{variant['count']}\n")
    
    print(f"Successfully generated {len(variants)} variants in {output_file}")
    
    # Print some statistics
    chr_counts = {}
    for variant in variants:
        chr_counts[variant['chr']] = chr_counts.get(variant['chr'], 0) + 1
    
    print("\nChromosome distribution:")
    for chr_name in sorted(chr_counts.keys()):
        print(f"  {chr_name}: {chr_counts[chr_name]} variants")
    
    genotype_counts = [0, 0, 0, 0]
    for variant in variants:
        if variant['count'] < len(genotype_counts):
            genotype_counts[variant['count']] += 1
    
    print("\nGenotype distribution:")
    print(f"  0 (hom ref): {genotype_counts[0]}")
    print(f"  1 (het): {genotype_counts[1]}")
    print(f"  2 (hom alt): {genotype_counts[2]}")
    print(f"  3 (complex): {genotype_counts[3]}")

def main():
    parser = argparse.ArgumentParser(
        description="Generate synthetic genomic data for testing",
        formatter_class=argparse.ArgumentDefaultsHelpFormatter
    )
    
    parser.add_argument(
        "-o", "--output",
        default="genotypes.txt",
        help="Output file name"
    )
    
    parser.add_argument(
        "-n", "--num-variants",
        type=int,
        default=10000,
        help="Number of variants to generate"
    )
    
    parser.add_argument(
        "-c", "--num-chromosomes",
        type=int,
        default=22,
        help="Number of autosomal chromosomes"
    )
    
    parser.add_argument(
        "-m", "--max-position",
        type=int,
        default=1000000,
        help="Maximum genomic position"
    )
    
    parser.add_argument(
        "--no-freq",
        action="store_true",
        help="Don't include allele frequencies"
    )
    
    parser.add_argument(
        "-s", "--seed",
        type=int,
        default=42,
        help="Random seed for reproducibility"
    )
    
    args = parser.parse_args()
    
    generate_genomic_data(
        output_file=args.output,
        num_variants=args.num_variants,
        num_chromosomes=args.num_chromosomes,
        max_position=args.max_position,
        include_freq=not args.no_freq,
        seed=args.seed
    )

if __name__ == "__main__":
    main()